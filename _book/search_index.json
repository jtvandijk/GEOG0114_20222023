[["transport-network-analysis.html", "2 Transport Network Analysis 2.1 Reading list 2.2 Network Analysis 2.3 Assignment 2.4 Before you leave", " 2 Transport Network Analysis This week we will cover a different type of data: network data. We will take a look at how we can use network data to measure accessibility using the dodgr R library. We will calculate the network distances between combinations of locations (i.e. a set of origins and a set of destinations). These distances can then, for instance, be used to calculate the number of a resource (e.g. fast-food outlets) within a certain distance of a Point of Interest (e.g. a school or population-weighted centroid). 2.1 Reading list Essential readings Geurs, K., Van Wee, B. 2004. Accessibility evaluation of land-use and transport strategies: review and research directions. Journal of Transport Geography 12(2): 127-140. [Link] Higgins, C., Palm, M. DeJohn, A. et al. 2022. Calculating place-based transit accessibility: Methods, tools and algorithmic dependence. Journal of Transport and Land Use 15(1): 95-116. [Link] Neutens, T. Schwanen, T. and Witlox, F. 2011. The prism of everyday life: Towards a new research agenda for time geography. Transport Reviews 31(1): 25-47. [Link] Schwanen, T. and De Jong, T. 2008. Exploring the juggling of responsibilities with space-time accessibility analysis. Urban Geography 29(6): 556-580. [Link] Suggested readings Van Dijk, J., Krygsman, S. and De Jong, T. 2015. Toward spatial justice: The spatial equity effects of a toll road in Cape Town, South Africa. Journal of Transport and Land Use 8(3): 95-114. [Link] Van Dijk, J. and De Jong, T. 2017. Post-processing GPS-tracks in reconstructing travelled routes in a GIS-environment: network subset selection and attribute adjustment. Annals of GIS 23(3): 203-217. [Link] 2.2 Network Analysis The term network analysis covers a wide range of analysis techniques ranging from complex network analysis to social network analysis, and from link analysis to transport network analysis. What the techniques have in common is that they are based on the concept of a network. A network or network graph is constituted by a collection of vertices that are connected to one another by edges. Note, vertices may also be called nodes or points, whilst edges may be called links or lines. Within social network analysis, you may find the terms actors (the vertices) and ties or relations (the edges) also used. Figure 2.1: Visualising networks with vertices and edges. Understanding that networks are formed through the connections of vertices and edges, we can think of many naturally and manmade occurring networks that also have a precise geography to them (i.e. their distribution can be mapped directly within geographic space), such as rivers connected with tributaries, animal tracks, electricity pylons and cables, and our road and street networks that form crucial parts of our infrastructure. The latter, in particular, have been a substantial focus of those working within spatial analysis over the last two decades, particularly with routing applications now dominating much of our day-to-day technology, from personal route-planning and ride-share apps to large-scale logistics and infrastructure applications, including the delivery operations behind all of our online shopping and even Scotland’s Trunk Road Gritters. Alongside this development of routing applications, GIS analysts, geographers and public health specialists have also identified the utility of network analysis within geographic space to calculate distance-based measurement and coverage buffers that can be used as part of accessibility studies that look to understand the provision of a specific resource (e.g. greenspaces, hospitals, and fast-food stores) to a certain area of population. 2.2.1 Accessibility to fast-food outlets For this week’s practical, we will be using Portsmouth in the UK as our area of interest for our analysis. One prominent topic within the city is the issue of public health and childhood obesity. According to figures released in March 2020 by Public Health England, more than one in three school pupils are overweight or obese by the time they finish primary school within the city - higher than the national average of one in four. One potential contributor to the health crisis is the ease and availability of fast-food outlets in the city. In the following, we will measure the accessibility of fast-food outlets within specific walking distances of all school in Portsmouth starting at 400m, then 800m and finally a 1km walking distance. We will then aggregate these results to the Lower Super Output Area (LSOA) and overlay these results with some socio-economic variable. To execute this analysis, we will need to first calculate the distances between our schools and fast-food outlets. This involves calculating the shortest distance a child would walk between a school and a fast-food outlet, using roads or streets. We will use the dodgr R package to conduct this transport network analysis. Note All calculations within the dodgr library currently need to be run in WGS84/4236. This is why we will not transform the CRS of our data in this practical. 2.2.2 Loading data The first dataset we need to download will help with the visualisation of our results: boundary data that contains an outline of Portsmouth. File File Type Link Major towns and cities boundaries 2015 shp Download We can now load the required libraries as well as the major towns and cities boundaries shapefile. # libraries library(tidyverse) library(sf) library(tmap) library(osmdata) library(dodgr) # load major towns and cities, filter Portsmouth portsmouth_city &lt;- st_read(&quot;data/outline/Major_Towns_and_Cities__December_2015__Boundaries.shp&quot;, stringsAsFactors = FALSE) %&gt;% filter(tcity15nm == &quot;Portsmouth&quot;) ## Reading layer `Major_Towns_and_Cities__December_2015__Boundaries&#39; from data source `/Users/justinvandijk/Dropbox/UCL/Web/jtvandijk.github.io/GEOG0114/data/outline/Major_Towns_and_Cities__December_2015__Boundaries.shp&#39; ## using driver `ESRI Shapefile&#39; ## Simple feature collection with 112 features and 5 fields ## Geometry type: MULTIPOLYGON ## Dimension: XY ## Bounding box: xmin: -4.204842 ymin: 50.34101 xmax: 1.378014 ymax: 55.03117 ## Geodetic CRS: WGS 84 To create our network and Origin-Destination dataset, we will need data on schools, fast-food outlets, and a streetnetwork. Today we will be using OpenStreetMap for this. If you have never come across OpenStreetMap (OSM) before, it is a free editable map of the world. Note Note OpenStreetMap’s spatial coverage is still unequal across the world - plus, as you will find if you use the data, the accuracy and quality of the data can often be quite questionable or simply missing attribute details that we would like to have, e.g. types of roads and their speed limits, to complete specific types of spatial analysis. As a result, do not expect OSM to contain every piece of spatial data that you would want. Whilst there are various approaches to downloading data from OpenStreetMap, we will use the osmdata library to directly extract our required OpenStreetMap (OSM) data into a variable. The osmdata library grants access within R to the Overpass API that allows us to run queries on OSM data and then import the data as spatial objects. These queries are at the heart of these data downloads. We will go ahead and start with downloading and extracting our road network data. To OSM data using the osmdata library, we can use the add_osm_feature() function. To use the function, we need to provided it with either a bounding box of our area of interest (AOI) or a set of points, from which the function will create its own bounding box. You can find out more about this and details on how to construct your own queries in the data vignette. To use the library (and API), we need to know how to write and run a query, which requires identifying the key and value that we need within our query to select the correct data. Essentially every map element (whether a point, line or polygon) in OSM is tagged with different attribute data. These keys and values are used in our queries to extract only map elements of that feature type - to find out how a feature is tagged in OSM is simply a case of reading through the OSM documentation and becoming familiar with their keys and values. To download our road network dataset, we first define a variable to store our bounding box coordinates, p_bbox(). We then use this within our OSM query to extract specific types of road segments within that bounding box - the results of our query are then stored in an osmdata object. We will select all OSM features with the highway tag that are likely to be used by pedestrians (e.g. not motorways). # define our bbox coordinates for Portsmouth p_bbox &lt;- c(-1.113197, 50.775781, -1.026508, 50.859941) # pass bounding box coordinates into the OverPassQuery (opq) function only # download features that are not classified as motorway osmdata &lt;- opq(bbox = p_bbox) %&gt;% add_osm_feature(key = &quot;highway&quot;, value = c(&quot;primary&quot;, &quot;secondary&quot;, &quot;tertiary&quot;, &quot;residential&quot;, &quot;path&quot;, &quot;footway&quot;, &quot;unclassified&quot;, &quot;living_street&quot;, &quot;pedestrian&quot;)) %&gt;% osmdata_sf() Note In some instances the OSM query will return an error, especially when several people from the same location are executing the exact same query. If this happens, you can just read through the instructions and download a prepared copy of the data that contains all required OSM Portsmouth data instead: [Link]. The osmdata object contains the bounding box of your query, a time-stamp of the query, and then the spatial data as osm_points, osm_lines, osm_multilines and osm_polgyons (which are listed with their respective fields also detailed). Some of the spatial features maybe empty, depending on what you asked your query to return. Our next step therefore is to extract our spatial data from our osmdata object to create our road network data set. This is in fact incredibly easy, using the traditional $ R approach to access these spatial features from our object. Deciding what to extract is probably the more complicated aspect of this - mainly as you need to understand how to represent your road network, and this will usually be determined by the library/functions you will be using it within. Today, we want to extract the edges of the network, i.e. the lines that represent the roads, as well as the nodes of the network, i.e. the points that represent the locations at which the roads start, end, or intersect. For our points, we will only keep the osm_id data field, just in case we need to refer to this later. For our lines, we will keep a little more information that we might want to use within our transport network analysis, including the type of road, the maximum speed, and whether the road is one-way or not. # extract the points, with their osm_id. ports_roads_nodes &lt;- osmdata$osm_points[, &quot;osm_id&quot;] # extract the lines, with their osm_id, name, type of highway, max speed and # oneway attributes ports_roads_edges &lt;- osmdata$osm_lines[, c(&quot;osm_id&quot;, &quot;name&quot;, &quot;highway&quot;, &quot;maxspeed&quot;, &quot;oneway&quot;)] To check our data set, we can quickly plot the edges of our road network using the plot() function: plot(ports_roads_edges, max.plot = 1) Because we are focusing on walking, we will overwrite the oneway variable by suggesting that none of the road segments are restricted to one-way traffic which may affect our analysis as well as the general connectivity of the network. # overwrite one-way default ports_roads_edges$oneway &lt;- &quot;no&quot; Now we have the network edges, we can turn this into a graph-representation that allows for the calculation of network-based accessibility statistics. 2.2.3 Accessibility in Portsmouth Before we can construct our full network graph for the purpose of accessibility analysis, we need to also provide our Origin and Destination points, i.e. the data points we wish to calculate the distances between. According to the dodgr documentation, these points need to be in either a vector or matrix format, containing the two coordinates for each point for the origins and for the destinations. As for our Portsmouth scenario we are interested in calculating the shortest distances between schools and fast-food outlets, we need to try and download these datasets - again we will turn to OpenStreetMap. Following a similar structure to our query above, we will use our knowledge of OpenStreetMap keys and values to extract the points of Origins (schools) and Destinations (fast-food outlets) we are interested in: # download schools from OSM schools &lt;- opq(bbox = p_bbox) %&gt;% add_osm_feature(key = &quot;amenity&quot;, value = &quot;school&quot;) %&gt;% osmdata_sf() # download fast-food outlets ff_outlets &lt;- opq(bbox = p_bbox) %&gt;% add_osm_feature(key = &quot;amenity&quot;, value = &quot;fast_food&quot;) %&gt;% osmdata_sf() We also need to then extract the relevant data from the osmdata object: # extract school points ports_schools &lt;- schools$osm_points[, c(&quot;osm_id&quot;, &quot;name&quot;)] # extract fast-food outlet points ports_ff &lt;- ff_outlets$osm_points[, c(&quot;osm_id&quot;, &quot;name&quot;)] We now have our road network data and our Origin-Destination (OD) points in place and we can now move to construct our network graph and run our transport network analysis. Note In this analysis, we are highly reliant on the use of OpenStreetMap to provide data for both our Origins and Destinations. Whilst in the UK OSM provides substantial coverage, its quality is not always guaranteed. As a result, to improve on our current methodology in future analysis, we should investigate into a more official school data set or at least validate the number of schools against City Council records. The same applies to our fast-food outlets. With any network analysis, the main data structure is a graph, constructed by our nodes and edges. To create a graph for use within dodgr, we pass our ports_roads_edges() into the weight_streetnet() function. The dodgr library also contains weighting profiles, that you can customise, for use within your network analysis. These weighting profiles contain weights based on the type of road, determined by the type of transportation the profile aims to model. Here we will use the weighting profile foot, as we are looking to model walking accessibility. # create network graph with the foot weighting profile graph &lt;- weight_streetnet(ports_roads_edges, wt_profile = &quot;foot&quot;) Once we have our graph, we can then use this to calculate our network distances between our OD points. One thing to keep in mind is that potentially not all individual components in the network that we extracted are connected, for instance, because the bounding box cut off the access road of a cul-de-sac. To make sure that our entire extracted network is connected, we now extract the largest connected component of the graph. You can use table(graph$component) to examine the sizes of all individual subgraphs. You will notice that most subgraphs consist of a very small number of edges. Note The dodgr package documentation explains that components are numbered in order of decreasing size, with $component = 1 always denoting the largest component. Always inspect the resulting subgraph to make sure that its coverage is adequate for analysis. # extract the largest connected graph component graph_connected &lt;- graph[graph$component == 1, ] # inspect number of remaining road segments nrow(graph_connected) ## [1] 55168 # inspect on a plot plot(dodgr_to_sf(graph_connected), max.plot = 1) Note OpenStreetMap is a living dataset, meaning that changes are made on a continuous basis; as such it may very well possible that the number of remaining road segments as shown above may be slighlty different when you run this analysis. Now we have our connected subgraph, will can use the dodgr_distances() function to calculate the network distances between every possible Origin and Destination. In the dodgr_distances() function, we first pass our graph, then our Origin points (schools), in the from argument, and then our Destination points (fast-food outlets), in the to argument. One thing to note is our addition of the st_coordinates() function as we pass our two point data sets within the from and to functions as we need to supplement our Origins and Destinations in a matrix format. For all Origins and Destinations, dodgr_distances() will map the points to the closest network points, and return corresponding shortest-path distances. # create a distance matrix between schools and fast-food stores sch_to_ff_calc &lt;- dodgr_distances(graph_connected, from = st_coordinates(ports_schools), to = st_coordinates(ports_ff), shortest = TRUE, pairwise = FALSE, quiet = FALSE) The result of this computation is a distance-matrix that contains the network distances between all Origins (i.e. schools) and all Destinations (i.e. fast-food outlets). Let’s inspect the first row of our output. Do you understand what the values mean? # inspect head(sch_to_ff_calc, n = 1) ## 1 2 3 4 5 6 7 8 ## 1 3998.142 2089.879 6545.47 9349.81 10899.07 2230.403 11839.42 2291.244 ## 9 10 11 12 13 14 15 16 ## 1 692.3284 1671.141 1674.336 1691.717 1671.141 2089.879 2089.879 2060.332 ## 17 18 19 20 21 22 23 24 ## 1 3998.142 2323.449 3998.142 3998.142 3335.304 1697.704 580.8907 7209.363 ## 25 26 27 28 29 30 31 32 ## 1 3607.952 1357.423 3317.865 340.6474 1101.115 10792.07 2961.145 2718.268 ## 33 34 35 36 37 38 39 40 ## 1 3496.951 2328.908 2816.301 2918.239 2918.239 735.5805 3395.716 6229.676 ## 41 42 43 44 45 46 47 48 ## 1 3391.185 9168.843 9370.359 9235.95 9479.754 1629.389 3514.018 2399.396 ## 49 50 51 52 53 54 55 56 ## 1 7170.083 8976.251 9400.705 9327.659 6479.238 6479.238 6466.598 6466.598 ## 57 58 59 60 61 62 63 64 ## 1 762.1435 2524.406 1067.077 1009.477 1009.477 1967.535 1418.994 2816.301 ## 65 66 67 68 69 70 71 72 ## 1 1244.659 2154.569 354.1211 688.6854 2161.812 2204.19 2118.189 11749.43 ## 73 74 75 76 77 78 79 80 ## 1 4826.28 2736.054 843.9919 614.8746 788.2592 2584.125 2664.845 728.304 ## 81 82 83 84 85 86 87 88 89 ## 1 11839.42 11839.42 11839.42 11928.4 11928.4 11928.4 11839.42 11839.42 11839.42 ## 90 91 92 93 94 95 96 97 ## 1 11839.42 11839.42 11839.42 11839.42 11319.15 6543.503 6587.764 6587.764 ## 98 99 100 101 102 103 104 105 ## 1 6439.991 3998.142 3998.142 4231.824 5927.351 3838.294 580.8907 597.1904 ## 106 107 108 109 110 111 112 113 ## 1 2652.993 5117.168 5314.69 5056.003 924.6992 5056.003 4042.625 752.9266 ## 114 115 116 117 118 119 120 121 ## 1 556.4247 713.106 622.4875 597.1904 1224.832 3336.312 3293.795 5466.739 ## 122 123 124 125 126 127 128 129 ## 1 6668.342 6668.342 6668.342 6624.566 6668.342 6668.342 6668.342 6668.342 ## 130 131 132 133 134 135 136 137 ## 1 6668.342 12341.63 9642.701 9642.701 5519.705 9333.198 9333.198 9284.818 ## 138 139 140 141 142 143 144 145 ## 1 8561.539 9284.818 9333.198 12020.21 12020.21 12027.48 12019.79 9546.286 ## 146 147 148 149 150 151 152 153 ## 1 3584.312 2298.443 814.6745 3456.002 5705.933 904.4865 904.4865 904.4865 ## 154 155 156 157 158 159 160 161 ## 1 4947.39 4966.305 857.6564 3212.692 3394.656 11414.32 4877.251 1811.892 ## 162 163 164 165 166 167 168 169 ## 1 9157.945 1663.962 9596.953 9656.822 4684.524 3173.789 3456.002 3115.424 ## 170 171 172 173 174 175 176 177 ## 1 5971.013 9630.31 9656.822 5236.027 3963.426 9217.529 6038.606 5969.851 ## 178 179 180 181 182 183 184 185 ## 1 8902.84 6653.714 5892.423 10767.55 1505.825 4993.058 11483.53 1573.278 ## 186 187 188 189 190 191 192 193 ## 1 5475.919 1802.432 3105.856 9100.228 4735.419 4966.305 4038.156 13151.31 ## 194 195 196 197 198 199 200 201 ## 1 5475.919 3293.795 3293.795 556.4247 788.2592 10108.87 5099.112 9630.31 ## 202 203 204 205 206 207 208 209 210 ## 1 9630.31 9630.31 9642.701 9642.701 9642.701 9642.701 9630.31 9630.31 5998.846 ## 211 212 213 214 215 216 217 218 219 ## 1 5603.786 4714.954 4038.156 4884.033 4883.197 1543.357 1510.18 1558.6 4941.797 ## 220 221 222 223 224 225 226 227 228 ## 1 4946.512 4186.433 3514.018 6044.226 5449.931 5314.69 5314.69 5314.69 5314.69 ## 229 230 231 232 233 234 235 236 237 ## 1 5314.69 5314.69 5314.69 4961.219 6269.88 5373.399 4735.419 5816.018 6632.675 ## 238 239 240 241 242 243 244 245 ## 1 4922.658 11553.81 11578.38 5056.003 5056.003 5056.003 5056.003 5099.112 ## 246 247 248 249 250 251 252 253 ## 1 5128.852 5099.112 5128.852 5128.852 5123.116 11839.42 6545.47 6545.47 ## 254 255 256 257 258 259 260 261 ## 1 6525.237 6545.47 6545.47 6525.237 4805.495 4966.305 11839.42 4771.743 ## 262 263 264 265 266 267 268 269 270 ## 1 4359.231 1129.667 1302.44 1302.44 1320.89 3341.427 4338 1330.855 1121.068 ## 271 272 273 274 275 276 277 278 ## 1 5294.833 11928.4 12020.21 3001.608 6479.238 5782.611 3372.009 3163.546 ## 279 280 281 282 283 284 285 286 ## 1 11578.38 2918.239 1674.582 2683.729 5834.882 5733.333 5735.212 5834.882 ## 287 288 289 290 291 292 293 294 ## 1 5834.882 4956.136 1128.579 9231.076 2058.099 7830.951 1113.875 1091.231 ## 295 296 297 298 299 300 301 302 ## 1 1091.231 1121.068 1091.231 4656.447 2204.19 3373.477 2737.401 3023.061 ## 303 304 305 306 307 308 309 310 ## 1 3496.759 3511.793 3511.793 3607.952 3607.952 3637.018 3374.812 3511.793 ## 311 312 313 ## 1 2722.797 597.1904 3530.288 Our output shows the calculations for the first school - and the distances between the school and every fast-food outlet. Because we manually overwrote the values for all one-way streets as well as that we extracted the larges connected graph only, we currently should not have any NA values. Note The dodgr vignette notes that a distance matrix obtained from running dodgr_distances on graph_connected should generally contain no NA values, although some points may still be effectively unreachable due to one-way connections (or streets). Thus, routing on the largest connected component of a directed graph ought to be expected to yield the minimal number of NA values, which may sometimes be more than zero. Note further that spatial routing points (expressed as from and/or to arguments) will in this case be mapped to the nearest vertices of graph_connected, rather than the potentially closer nearest points of the full graph. The next step of processing all depends on what you are trying to assess - here we want to understand which schools have a higher accessibility of fast-food outlets compared to others, quantified by how many outlets are within walking distance of specific distances. We will therefore look to count how many outlets are with walking distance from each school and store this as a new column within our ports_school data frame. # fastfood outlets within 400m ports_schools$ff_within_400m &lt;- rowSums(sch_to_ff_calc &lt;= 400) # fastfood outlets within 800m ports_schools$ff_within_800m &lt;- rowSums(sch_to_ff_calc &lt;= 800) # fastfood outlets within 1000m ports_schools$ff_within_1km &lt;- rowSums(sch_to_ff_calc &lt;= 1000) We can then look at our outputs quickly again using the plot() function. # set CRS for Portsmouth schools ports_schools &lt;- st_set_crs(ports_schools, 4326) # plot results plot(ports_schools) Just from this simple plot, we can see across our distances some clear geographical patterns in accessibility of fast-food outlets for schools. We can improve this plot by making a proportional symbols map that show the different counts of fast-food outlets for each school in Portsmouth with a background of the Portsmouth City outline that you loaded at the beginning of this practical. # create proportional symbol map tm_shape(portsmouth_city) + tm_fill(palette = &quot;grey&quot;) + tm_shape(ports_schools) + tm_bubbles(size = &quot;ff_within_400m&quot;, col = &quot;skyblue4&quot;, style = &quot;pretty&quot;, scale = 1, border.col = &quot;white&quot;, title.size = &quot;Total Count&quot;) + tm_layout(legend.position = c(&quot;left&quot;, &quot;top&quot;), legend.text.size = 1, main.title = &quot;Fast-food outlets within 400m of a school&quot;, main.title.size = 1) + tm_compass(type = &quot;arrow&quot;, position = c(&quot;right&quot;, &quot;top&quot;)) + tm_scale_bar(position = c(&quot;left&quot;, &quot;bottom&quot;)) + tm_credits(&quot;© OpenStreetMap contributors&quot;) The map shows that areas with greater access/exposure to fast-food outlets (denoted by the larger symbols) appear to be within the city centre and in the south, whereas those schools in the north have less exposure. However, with additional contextual information one would also be able to see that these two areas correlate quite well with the more commercial areas within Portsmouth, the high street and an area known as Gunwharf Quays. This suggests there are complexities in understanding accessibility as well as trying to apply specific policies such as banning new fast-food takeaways within a 400m range of school, particularly if these schools are in commercial areas. 2.3 Assignment Now you have calculated the number of fast-food outlets within specific distances from every school in Portsmouth, your task is to estimate the accessibility of fast-food outlets at the LSOA scale and compare this to the 2019 Index of Multiple Deprivation. Note This skills and steps required for this analysis are not just based on this week’s practical, but you will have to combine all your knowledge of coding and spatial analysis you have gained over the past weeks. One way of doing this, is by taking some of the following steps: Download and extract the 2011 LSOA boundaries of Portsmouth. Download the 2019 Index of Multiple Deprivation scores. Decide on an accessibility measure, such as: The average number of fast-food restaurants within X distance of a school within each LSOA. The average distance a fast-food restaurant is from a school within each LSOA. The (average) shortest distance a fast-food restaurant is from a school within each LSOA. The minimum shortest distance a fast-food outlet is from a school within each LSOA. Create a choropleth map of aggregate accessibility to visualse the results. Join the 2019 Index of Multiple Deprivation data to your LSOA dataset. For each IMD decile, calculate the average for your chosen aggregate measure and produce a table. Using your approach what do you think: are fast-food restaurants, on average, more accessible for students at schools that are located within LSOAs with a lower IMD decile when compared to students at schools that are located within LSOAs with a higher IMD decile? Bonus Some additional challenges to consider: Try to understand how the different weight profiles of the dodgr package work, how one would go about creating your own weight profile, and how using a different weight profile may affect the results of your analysis. Inspect the unconnected segments of the extracted network. Why are they unconnected? Would they need to be connected? How would one do this? Currently all Origins and Destinations are mapped onto the closest network point. Why you think this is done? Is this always the best option? What alternative methods could you think of and how would you implement these? 2.4 Before you leave Having finished this tutorial on transport network analysis and, hopefully, having been able to independently conduct some further area-profiling using IMD deciles, you have now reached the end of this week’s content! "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
